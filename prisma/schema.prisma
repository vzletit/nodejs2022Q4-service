generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String  @db.VarChar(255)
  year     Int
  artist   Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId String? @db.Uuid
  

  favorite AlbumFav?
  Track    Track[]
}

model AlbumFav {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist  Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String @unique @db.Uuid
}

model Artist {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String  @db.VarChar(255)
  grammy Boolean

  favorite ArtistFav?
  Track    Track[]
  Album    Album[]
}

model ArtistFav {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String @unique @db.Uuid
}

model Track {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String  @db.VarChar(255)
  duration Int
  album    Album?  @relation(fields: [albumId], references: [id], onDelete: SetNull)
  albumId  String? @db.Uuid

  artist   Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId String? @db.Uuid

  favorite TrackFav?
}

model TrackFav {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist  Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String @unique @db.Uuid
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)
}
