generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String  @db.VarChar(255)
  year     Int
  artistId String? @db.Uuid

  favorite AlbumFav?
}


model AlbumFav {
  id    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId  String @db.Uuid @unique
  }

model Artist {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String  @db.VarChar(255)
  grammy Boolean

  favorite ArtistFav?
}

model ArtistFav {
  id    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String @db.Uuid @unique
  }


model Track {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artistId String? @db.Uuid
  name     String  @db.VarChar(255)
  duration Int
  albumId  String? @db.Uuid

  favorite TrackFav?
}


model TrackFav {
  id    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId  String @db.Uuid @unique
  }


model User {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login      String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version    Int      @default(1) 
}



